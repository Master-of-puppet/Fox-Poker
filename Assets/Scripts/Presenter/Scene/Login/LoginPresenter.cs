// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using Puppet;
using Puppet.API.Client;
using Puppet.Core.Network.Http;
using Puppet.Service;

public class LoginPresenter : ILoginPresenter
{
	ILoginView view;
	public LoginPresenter(ILoginView view){
		this.view = view;

	}

    public void ShowRegister()
    {
        view.ShowRegister(RegisterComplete);
	}
    void RegisterComplete(bool? status,string userName,string password){
        if (status == true)
            LoginWithUserName(userName, password);
        else
            view.ShowError("Không đăng ký được tài khoản");
    }
	public void ViewEnd(){
		SocialService.Instance.onLoginComplete -= onLoginComplete;
	}

    public void ViewStart()
    {
        PuApp.Instance.StartApplication();
        SocialService.Instance.onLoginComplete += onLoginComplete;
    }
	#region ILoginPresenter implementation
    public void LoginTrail()
    {
        APILogin.LoginTrial((bool status, string message) =>
        {
            if (status == false)
                ShowDialogErrorInMainThread(message);
        });
    }

    public void LoginFacebook()
    {
        SocialService.SocialLogin(SocialType.Facebook);
    }
	public void LoginWithUserName (string username, string password)
	{
		APILogin.GetAccessToken (username, password,GetAccessTokenCallBack);
	}

	public void GetAccessTokenWithSocial (string accessToken)
	{
		APILogin.GetAccessTokenFacebook (accessToken, OnGetAccessTokenWithFacebookCallBack);
	}

	public void LoginWithAccessToken (string accessToken)
	{
		APILogin.Login (accessToken, LoginCallBack);
	}

	void OnGetAccessTokenWithFacebookCallBack (bool status, string message, System.Collections.Generic.Dictionary<string, object> data)
	{
		foreach (string key in data.Keys) {
			Logger.Log ("=======> " + key + " - " + data[key].ToString());	
		}

	}

	#endregion

	void GetAccessTokenCallBack (bool status, string message, IHttpResponse data)
	{
		if (status) {
			LoginWithAccessToken (message);
		} else {
            ShowDialogErrorInMainThread(message);
		}
	}
	
	void LoginCallBack (bool status, string message)
	{
        if (!status)
            ShowDialogErrorInMainThread(message);
	}

	void onLoginComplete (SocialType arg1, bool arg2)
	{
			if(arg2){
				GetAccessTokenWithSocial(SocialService.GetSocialNetwork(arg1).AccessToken);
	        }
	}
    void ShowDialogErrorInMainThread(string message)
    {
        PuMain.Setting.Threading.QueueOnMainThread(() =>
        {
            view.ShowError(message);
        });

    }
}


